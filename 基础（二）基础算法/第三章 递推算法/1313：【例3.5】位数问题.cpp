#include <bits/stdc++.h>
using namespace std;
//a[i]表示从0~99...9(i位9)这些数字中，一共有多少个有偶数个3的数（取模后）
//b[i]表示从0~99...9(i位9)这些数字中，一共有多少个有奇数个3的数（取模后）
//1位数 0~9 只有数字3有奇数个3，其余9个数字有偶数个3（包括0个）。
//a[1]=9 表示在0~9共10个数中有9个数字有偶数个3, b[1] = 1 表示在0~9共10个数中有1个数字有奇数个3
//2位数，就是在1位数前面添加一位数字。若添加的这位数是3，那么如果原数字是奇数个3，新数字就是偶数个3。如果添加的数字不是3，那么原数字是偶数个3，新数字就是偶数个3。
//新数字有偶数个3的情况有1 * 1 + 9 * 9 = 82
//a[2]=82 表示在0~99共100个数字中，有82个数字有偶数个3
//b[2] = 1 * 9 + 9 * 1 = 18 有18个数字有奇数个3 

//i+1位数为在i位数前添加1位，添加的这位可能为3（1种情况），可能不为3（9种情况），若原有i位数为偶数个3的情况有a[i]种，原i位数为奇数个3的情况有b[i]种
//a[i+1] = a[i]*9 + b[i];  b[i+1] = a[i] + b[i]*9


//题目要求的是“在所有的n位数中有偶数个3的数字的个数”
//那么0~99...9(i位)这些数字，可以分为0~99...9(i-1位)与10^i~9...9(i位)两部分，前面一部分中有偶数个3的数字个数为a[i-1],后面一部分即为所有i位数。
//记所有i位数中有偶数个3的数字个数为c[i]，那么有a[i] = a[i-1] + c[i]
//c[i] = a[i] - a[i-1]

//int main()
//{
//    int a[1005], b[1005], n;
//    const int MOD = 12345;
//    a[1] = 9, b[1] = 1;
//    cin>>n;
//    for(int i = 1; i < n; ++i)
//    {
//        a[i + 1] = (a[i]*9 + b[i])%MOD;
//        b[i + 1] = (a[i] + b[i]*9)%MOD;
//    }
//    cout<<(a[n] - a[n-1] + MOD)%MOD;//做取模处理，以防做减法后可能变为负数 
//    return 0;
//}

int main()
{
    int a[1005], b[1005], n, x = 9;
    const int MOD = 12345;
    a[1] = 9, b[1] = 1;
    cin>>n;
    for(int i = 2; i <= n; ++i)
    {
        if(i == n)//最后一次添加数字，添加的是最高位数字，不能添加0，所以不添加3的情况只有8种
            x--;
        a[i] = (a[i-1]*x + b[i-1])%MOD;
        b[i] = (a[i-1] + b[i-1]*x)%MOD;
    }
    cout<<a[n];
    return 0;
}
